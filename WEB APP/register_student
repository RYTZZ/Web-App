from werkzeug.security import generate_password_hash, check_password_hash

@app.route('/register_student', methods=['GET','POST'])
@login_required  # recommend only admin can register students
def register_student():
    # only admins can access this page
    if not isinstance(current_user, Admin):
        flash("Only admins can register students.", "danger")
        return redirect(url_for('index'))

    if request.method == 'POST':
        name = request.form['name'].strip()
        student_id = request.form['student_id'].strip()
        course = request.form.get('course')
        block = request.form.get('block')

        if Student.query.filter_by(student_id=student_id).first():
            flash('Student ID already exists', 'danger')
            return redirect(url_for('register_student'))

        # default password = student_id
        default_pw_hash = generate_password_hash(student_id)
        student = Student(student_id=student_id, name=name,
                          password_hash=default_pw_hash, course=course, block=block,
                          must_change_password=True)
        db.session.add(student)
        db.session.commit()

        # generate QR (URL with token)
        token = student.qr_token
        scan_url = url_for('qr_scan_endpoint', token=token, _external=True)
        img = qrcode.make(scan_url)
        fname = os.path.join('data','qrcodes', f"{student.id}_{student.student_id}.png")
        img.save(fname)

        flash('Student registered. Default password is the Student ID. QR generated.', 'success')
        return redirect(url_for('students_list'))

    return render_template('register_student.html')
